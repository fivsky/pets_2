n = 5
print(n)

a = 5
b = 5.89
c = hello
 
a = input
print (a)

print('Р’РІРµРґРёС‚Рµ РїРµСЂРІРѕРµ С‡РёСЃР»Рѕ:')
a = input()

b = input('Р’РІРµРґРёС‚Рµ РІС‚РѕСЂРѕРµ С‡РёСЃР»Рѕ: ')

5 = 5.89
print(c)
n = int(c)
print(n)



n = none

n = 1.89
print(n)

n = 'fddf'

n = 5
print(type(n)
РІС‹РІРѕРґРёС‚СЃСЏ РєР»Р°СЃСЃ

a = 5.899
b = 7.88

print(round(a*b, 3))


2

22

 #include <bits/stdc++.h>
using namespace std;

bool dp[100001];

int main()
{
    int n, m;
    cin >> n >> m;
    for (size_t i = 0; i < n; i++)
    {
        int x;
        cin >> x;
        dp[x] = true;
    }
    vector<int> ans;
    for (size_t i = 0; i < m; i++)
    {
        int x;
        cin >> x;
        if (dp[x])
        {
            ans.push_back(x);
            dp[x] = false; //<--- СЂРµС€РµРЅРёРµ
        }

    }
    sort(ans.begin(), ans.end());
    for (auto& b : ans)
        cout << b << " ";


24


nclude <iostream> 
using namespace std; 
main()
{
int a[1000],i,n,s;
cin>>n;
for(i=0;i<n;i++)
cin>>a[i];
s=a[0]+a[n-1]+((a[1]>a[n-2])?a[1]:a[n-2]);
for(i=1;i<n-1;i++)
if(a[i-1]+a[i]+a[i+1]>s)s=a[i-1]+a[i]+a[i+1];
cout<<s;
}

задача 34

def rhythm(str):
    str = str.split()
    list_1 = []
    for word in str:
        sum_w = 0
        for i in word:
            if i in 'аеёиоуыэюя':
                sum_w += 1
        list_1.append(sum_w)
    return len(list_1) == list_1.count(list_1[0])


str_1 = 'пара-ра-рам рам-пам-папам па-ра-па-дам'
if rhythm(str_1):
    print('Парам пам-пам')
else:
    print('Пам парам')




задача 36


def print_operation_table(operation, num_rows=6, num_columns=6):
    a = [[operation(i, j) for j in range(1, num_columns + 1)] for i in range(1, num_rows + 1)]
    for i in a:
        print(*[f"{x:>3}" for x in i])


print_operation_table(lambda x, y: x * y)

НОВАЯ ЗАДАЧА
          
          import sys
import sqlite3  

def print_menu():  
    print ('\nPlease select from the following items:')  
    print('1. Add new contact')  
    print('2. Display contacts')  
    print('3. Edit contacts')  
    print('4. Delete contacts')
    print('5. Find contacts')
    print('0. Exit the program')

def addcontact():
    while True:  
        name = input("What is the person's first name?: ") 
        if len(name) != 0:  
            break  
        else:  
            print("Please enter the contact's name")     
    while True:  
        surname = input("What is the person's surname name?: ")  
        if len(surname) != 0:  
            break  
        else:  
            print("Please enter the surname")    
    while True:  
        num = input("What is the person's phone number? (only digits allowed): ")  
        if not num.isdigit():  
            print("Please enter only digits")  
            continue  
        elif len(num) != 10:  
            print("Please enter 10-digits phone number with no comma, no spaces, no punctuation")  
            continue  
        else:  
            break  
    cursor.execute('''INSERT INTO phonebook (name, surname, phone_number) VALUES (?,?,?)''',
                                                                         (name, surname, num))  
    conn.commit()      
    print("New contact " + surname + ' ' + name + " was added to the phonebook table")

def displaybook():
    cursor.execute("SELECT surname, name, phone_number FROM phonebook ORDER BY surname")
    results = cursor.fetchall()
    print(results)

def key_pair_reception(str):
    print ("\nPlease select the key field for " + str + " (from 1 to 3)")  
    print('1. Name')  
    print('2. Surname')  
    print('3. Phone_number')  
    print('0. Return to the Main menu')
    n = int(input('Your choice: '))
    if n == 1:  
        field = "name"
    elif n == 2:  
        field = "surname"
    elif n == 3:  
        field = "phone_number"
    else:
        return None
    keyword = input("\nPlease enter the key value: " + field + " = ")
    keypair = field + "='" + keyword + "'"
    return keypair

def editcontacts():
    s = key_pair_reception('searching')
    u = key_pair_reception('updating')
    if s != None:
        sql = "UPDATE phonebook SET " + u + " WHERE " + s
        cursor.execute(sql)
        conn.commit()
        print("The records with " + s + " are deleted.\n")

def deletecontacts():
    s = key_pair_reception('searching')
    if s != None:
        sql = 'DELETE FROM phonebook WHERE ' + s
        cursor.execute(sql)
        conn.commit()
        print("The records with " + s + " are deleted.\n")

def findcontacts():
    s = key_pair_reception('searching')
    if s != None:
        sql = 'SELECT surname, name, phone_number FROM phonebook WHERE ' + s + ' ORDER BY surname'
        cursor.execute(sql)
        results = cursor.fetchall()
        print(results)

# Основная программа
print ('\nWELCOME TO THE PHONE DIRECTORY')
conn = sqlite3.connect('my.db')  
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS phonebook (
                id integer PRIMARY KEY,
                name text NOT NULL,
                surname text,
                phone_number text)''');
m = -1  
while m != 0:
    print_menu()  
    m = int(input('Your choice: '))  
    if m == 1:  
        addcontact()
        continue
    elif m == 2:  
        displaybook()
        continue
    elif m == 3:  
        editcontacts()
        continue
    elif m == 4:  
        deletecontacts()
        continue
    elif m == 5:  
        findcontacts()
        continue
    elif m == 0:  
        print('The program is completed.\n')
        conn.close()
        sys.exit(0)  
    else:  
        print('Please follow instructions)


задача 42

data_frame[data_frame['population'] == data_frame['population'].min()]['households']
households==data_frame[data_frame[households].max()



  print("Результат: ", 7, 15, sep="", end="")
print(5 + 5)

number = 5
print("Результат:", number)

del number

number = 7

number = 7
print("Результат:", number)

num1 = input("Введите первое число: ")
num2 = input("Введите второе число: ")

print("Result:", num1 + num2)
print("Result:", num1 - num2)
# и др операции

num1 += 5
----


number = 5 #int
digit = 4.54356. #float
word = "Hello" #string
boolean = False #bool

print(word, digit)

чтобы превратить digit в string, указываем для digit кавычки


задача 16

main()
{
int a[1000],n,i,x,k=0;
cin>>n;
for(i=0;i<n;i++)
cin>>a[i];
cin>>x;
for(i=0;i<n;i++)
if (a[i]==x)k++;
cout<<k;
}

задача 18

a=list(map(int,input().split()))
b=int(input())
c=[]
for i in a:
    c.append(abs(b-i))
d=c.index(min(c))
print(a[d])




задача 20

def isCyrillic(text):
	return bool(re.search('[а-яА-Я]', text))
points_en = {1:'AEIOULNSTR',
      	2:'DG',
      	3:'BCMP',
      	4:'FHVWY',
      	5:'K',
      	8:'JZ',
      	10:'QZ'}
points_ru = {1:'АВЕИНОРСТ',
      	2:'ДКЛМПУ',
      	3:'БГЁЬЯ',
      	4:'ЙЫ',
      	5:'ЖЗХЦЧ',
      	8:'ШЭЮ',
      	10:'ФЩЪ'}
text = input().upper()
if isCyrillic(text):
	print(sum([k for i in text for k, v in points_ru.items() if i in v]))
else:
	print(sum([k for i in text for k, v in points_en.items() if i in v]))



ИТОГОВЫЙ ПРОЕКТ

    задание 44.

import pandas as pd
import random
lst = ['robot'] * 10
lst += ['human'] * 10
random.shuffle(lst)

#1 Создаем DataFrame из одного столбца:

data = pd.DataFrame({'whoAmI': lst})

#2 Получаем уникальные значения столбца 'whoAmI':

unique_vals = data['whoAmI'].unique()

#3 Создаем новые столбцы в DataFrame:

for val in unique_vals:
    data[val] = 0

#4 Заполняем столбцы единицами, если значение в строке равно соответствующей метке:

for i in range(len(data)):
    for val in unique_vals:
        if data.loc[i, 'whoAmI'] == val:
            data.loc[i, val] = 1
data = data.drop('whoAmI', axis=1) 

#5 Удаляем столбец 'whoAmI'
data.head()
